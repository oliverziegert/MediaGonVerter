/*
 * DRACOON API
 *
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * API version: 4.33.5
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package core_service

import (
	"fmt"
	"net/http"
	"pc-ziegert.de/media_service/common/config"
	"pc-ziegert.de/media_service/common/constant"
	"strconv"
)

// contextKeys are used to identify the type of value in the context.
// Since these are string, it is possible to get a short description of the
// context key for logging and debugging using key.String().

var (
	// ContextOAuth2 takes a oauth2.TokenSource as authentication for the request.
	ContextOAuth2 = constant.ContextOAuth2

	// ContextBasicAuth takes BasicAuth as authentication for the request.
	ContextBasicAuth = constant.ContextBasicAuth

	// ContextAccessToken takes a string oauth2 access token as authentication for the request.
	ContextAccessToken = constant.ContextAccessToken

	// ContextAPIKey takes an APIKey as authentication for the request
	ContextAPIKey = constant.ContextAPIKey
)

// BasicAuth provides basic http authentication to a request passed via context using ContextBasicAuth
type BasicAuth struct {
	UserName string `json:"userName,omitempty"`
	Password string `json:"password,omitempty"`
}

// APIKey provides API key based authentication to a request passed via context using ContextAPIKey
type APIKey struct {
	Key    string
	Prefix string
}

type Configuration struct {
	BasePath      string            `json:"basePath,omitempty"`
	Host          string            `json:"host,omitempty"`
	Scheme        string            `json:"scheme,omitempty"`
	DefaultHeader map[string]string `json:"defaultHeader,omitempty"`
	UserAgent     string            `json:"userAgent,omitempty"`
	HTTPClient    *http.Client
}

func NewConfiguration(config *config.Config) *Configuration {
	cfg := &Configuration{
		BasePath: fmt.Sprintf(constant.CoreServiceBasePathTemplate,
			config.Service.Core.Protocol,
			config.Service.Core.Host,
			config.Service.Core.Port,
		),
		DefaultHeader: make(map[string]string),
		UserAgent:     "PC-Ziegert MediaService " + constant.AppVersion,
		HTTPClient:    http.DefaultClient,
	}
	return cfg
}

func (c *Configuration) AddDefaultDracoonHeader(protocol string, host string, port uint16) {
	c.AddDefaultHeader(constant.DracoonForwardedProtoHeader, protocol)
	c.AddDefaultHeader(constant.DracoonForwardedHostHeader, host)
	c.AddDefaultHeader(constant.DracoonForwardedPortHeader, strconv.FormatUint(uint64(port), 10))
}

func (c *Configuration) AddDefaultHeader(key string, value string) {
	c.DefaultHeader[key] = value
}
